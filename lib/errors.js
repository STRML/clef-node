// Generated by CoffeeScript 1.9.3
(function() {
  var APIError, ConnectionError, InvalidAppError, InvalidAppIDError, InvalidAppSecretError, InvalidLogoutHookURLError, InvalidLogoutTokenError, InvalidOAuthCodeError, InvalidOAuthTokenError, NotFoundError, ParseError, ServerError,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  APIError = (function(superClass) {
    extend(APIError, superClass);

    APIError.prototype.type = 'APIError';

    function APIError(message) {
      this.message = message;
      if (this.type != null) {
        this.name = this.type;
      }
      this.stack = (new Error(this.message)).stack;
    }

    return APIError;

  })(Error);

  InvalidAppIDError = (function(superClass) {
    extend(InvalidAppIDError, superClass);

    function InvalidAppIDError() {
      return InvalidAppIDError.__super__.constructor.apply(this, arguments);
    }

    InvalidAppIDError.prototype.type = 'InvalidAppIDError';

    return InvalidAppIDError;

  })(APIError);

  InvalidAppSecretError = (function(superClass) {
    extend(InvalidAppSecretError, superClass);

    function InvalidAppSecretError() {
      return InvalidAppSecretError.__super__.constructor.apply(this, arguments);
    }

    InvalidAppSecretError.prototype.type = 'InvalidAppSecretError';

    return InvalidAppSecretError;

  })(APIError);

  InvalidAppError = (function(superClass) {
    extend(InvalidAppError, superClass);

    function InvalidAppError() {
      return InvalidAppError.__super__.constructor.apply(this, arguments);
    }

    InvalidAppError.prototype.type = 'InvalidAppError';

    return InvalidAppError;

  })(APIError);

  InvalidOAuthCodeError = (function(superClass) {
    extend(InvalidOAuthCodeError, superClass);

    function InvalidOAuthCodeError() {
      return InvalidOAuthCodeError.__super__.constructor.apply(this, arguments);
    }

    InvalidOAuthCodeError.prototype.type = 'InvalidOAuthCodeError';

    return InvalidOAuthCodeError;

  })(APIError);

  InvalidOAuthTokenError = (function(superClass) {
    extend(InvalidOAuthTokenError, superClass);

    function InvalidOAuthTokenError() {
      return InvalidOAuthTokenError.__super__.constructor.apply(this, arguments);
    }

    InvalidOAuthTokenError.prototype.type = 'InvalidOAuthTokenError';

    return InvalidOAuthTokenError;

  })(APIError);

  InvalidLogoutHookURLError = (function(superClass) {
    extend(InvalidLogoutHookURLError, superClass);

    function InvalidLogoutHookURLError() {
      return InvalidLogoutHookURLError.__super__.constructor.apply(this, arguments);
    }

    InvalidLogoutHookURLError.prototype.type = 'InvalidLogoutHookURLError';

    return InvalidLogoutHookURLError;

  })(APIError);

  InvalidLogoutTokenError = (function(superClass) {
    extend(InvalidLogoutTokenError, superClass);

    function InvalidLogoutTokenError() {
      return InvalidLogoutTokenError.__super__.constructor.apply(this, arguments);
    }

    InvalidLogoutTokenError.prototype.type = 'InvalidLogoutTokenError';

    return InvalidLogoutTokenError;

  })(APIError);

  ServerError = (function(superClass) {
    extend(ServerError, superClass);

    function ServerError() {
      return ServerError.__super__.constructor.apply(this, arguments);
    }

    ServerError.prototype.type = 'ServerError';

    return ServerError;

  })(APIError);

  ConnectionError = (function(superClass) {
    extend(ConnectionError, superClass);

    function ConnectionError() {
      return ConnectionError.__super__.constructor.apply(this, arguments);
    }

    ConnectionError.prototype.type = 'ConnectionError';

    return ConnectionError;

  })(APIError);

  NotFoundError = (function(superClass) {
    extend(NotFoundError, superClass);

    function NotFoundError() {
      return NotFoundError.__super__.constructor.apply(this, arguments);
    }

    NotFoundError.prototype.type = 'NotFoundError';

    return NotFoundError;

  })(APIError);

  ParseError = (function(superClass) {
    extend(ParseError, superClass);

    function ParseError() {
      return ParseError.__super__.constructor.apply(this, arguments);
    }

    ParseError.prototype.type = 'ParseError';

    return ParseError;

  })(APIError);

  module.exports = {
    APIError: APIError,
    InvalidAppIDError: InvalidAppIDError,
    InvalidAppSecretError: InvalidAppSecretError,
    InvalidAppError: InvalidAppError,
    InvalidOAuthCodeError: InvalidOAuthCodeError,
    InvalidOAuthTokenError: InvalidOAuthTokenError,
    InvalidLogoutHookURLError: InvalidLogoutHookURLError,
    InvalidLogoutTokenError: InvalidLogoutTokenError,
    ServerError: ServerError,
    ConnectionError: ConnectionError,
    NotFoundError: NotFoundError,
    ParseError: ParseError
  };

}).call(this);
