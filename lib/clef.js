// Generated by CoffeeScript 1.9.1
(function() {
  var ClefAPI, MESSAGE_TO_ERROR_MAP, errorName, errorType, errors, request,
    hasProp = {}.hasOwnProperty;

  request = require('request');

  errors = require('./errors');

  MESSAGE_TO_ERROR_MAP = {
    'Invalid App ID.': errors.InvalidAppIDError,
    'Invalid App Secret.': errors.InvalidAppSecretError,
    'Invalid App.': errors.InvalidAppError,
    'Invalid OAuth Code.': errors.InvalidOAuthCodeError,
    'Invalid token.': errors.InvalidOAuthTokenError,
    'Invalid logout hook URL.': errors.InvalidLogoutHookURLError,
    'Invalid Logout Token.': errors.InvalidLogoutTokenError
  };

  ClefAPI = (function() {
    function ClefAPI(opts) {
      var ref;
      this.root = (ref = opts['root']) != null ? ref : 'https://clef.io/api';
      this.version = 'v1';
      this.appID = opts['appID'];
      this.appSecret = opts['appSecret'];
      this.apiBase = this.root + "/" + this.version;
      this.authorizeURL = this.apiBase + "/authorize";
      this.infoURL = this.apiBase + "/info";
      this.logoutURL = this.apiBase + "/logout";
    }

    ClefAPI.initialize = function(opts) {
      return new ClefAPI(opts);
    };

    ClefAPI.prototype.sendRequest = function(opts, callback) {
      var requestOptions;
      requestOptions = {};
      requestOptions.url = opts.url;
      requestOptions.method = opts.method;
      if (requestOptions.method === 'GET') {
        requestOptions.qs = opts.params;
      } else if (requestOptions.method === 'POST') {
        requestOptions.form = opts.params;
      }
      return request(requestOptions, function(err, response, body) {
        var ErrorClass, jsonBody, message, ref, ref1;
        jsonBody = JSON.parse(body != null ? body : null);
        message = (ref = jsonBody.error) != null ? ref : err != null ? err.message : void 0;
        switch (response.statusCode) {
          case 500:
            return callback(new errors.ServerError(message));
          case 404:
            return callback(new errors.NotFoundError(message));
          case 403:
          case 400:
            ErrorClass = (ref1 = MESSAGE_TO_ERROR_MAP[message]) != null ? ref1 : errors.APIError;
            return callback(new ErrorClass(message));
          case 200:
            return callback(null, jsonBody);
          default:
            return callback(new errors.APIError(message != null ? message : 'Unknown error'));
        }
      });
    };

    ClefAPI.prototype._getAccessToken = function(code, callback) {
      var params;
      params = {
        code: code,
        app_id: this.appID,
        app_secret: this.appSecret
      };
      return this.sendRequest({
        url: this.authorizeURL,
        method: 'POST',
        params: params
      }, (function(_this) {
        return function(err, json) {
          if (err != null) {
            return callback(err);
          } else {
            return callback(null, json['access_token']);
          }
        };
      })(this));
    };

    ClefAPI.prototype._getUserInfo = function(accessToken, callback) {
      return this.sendRequest({
        url: this.infoURL,
        method: 'GET',
        params: {
          access_token: accessToken
        }
      }, (function(_this) {
        return function(err, json) {
          if (err != null) {
            return callback(err);
          } else {
            return callback(null, json['info']);
          }
        };
      })(this));
    };

    ClefAPI.prototype.getLoginInformation = function(opts, callback) {
      return this._getAccessToken(opts.code, (function(_this) {
        return function(err, accessToken) {
          if (err != null) {
            return callback(err);
          }
          return _this._getUserInfo(accessToken, function(err, userInfo) {
            if (err != null) {
              return callback(err);
            }
            return callback(null, userInfo);
          });
        };
      })(this));
    };

    ClefAPI.prototype.getLogoutInformation = function(opts, callback) {
      var params;
      params = {
        logout_token: opts.logoutToken,
        app_id: this.appID,
        app_secret: this.appSecret
      };
      return this.sendRequest({
        url: this.logoutURL,
        method: 'POST',
        params: params
      }, (function(_this) {
        return function(err, json) {
          if (err != null) {
            return callback(err);
          }
          return callback(null, json['clef_id']);
        };
      })(this));
    };

    return ClefAPI;

  })();

  for (errorName in errors) {
    if (!hasProp.call(errors, errorName)) continue;
    errorType = errors[errorName];
    ClefAPI.prototype[errorName] = errorType;
  }

  module.exports = ClefAPI;

}).call(this);
